#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Create components for an ordering organization
  hosts: localhost
  vars:
    state: present
    organization_name: "{{ ordering_org_name }}"
    organization_msp_id: "{{ ordering_service_msp }}"
    wallet: "{{ home_dir }}"
  vars_files:
    - common-vars.yml
    - ordering-org-vars.yml
  roles:
    - ibm.blockchain_platform.ordering_organization

- name: Create components for an endorsing organization
  hosts: localhost
  vars:
    state: present
    organization_name: "{{ org1_name }}"
    organization_msp_id: "{{ org1_msp_id }}"
    ca_name: "{{ org1_ca_name }}"
    peer_name: "{{ org1_peer_name }}"
    wallet: "{{ home_dir }}"
  vars_files:
    - common-vars.yml
    - org1-vars.yml
  roles:
    - ibm.blockchain_platform.endorsing_organization

## taken from 05-add-organization-to-consortium

- name: Add the organization to the consortium
  hosts: localhost
  vars_files:
    - common-vars.yml
    - ordering-org-vars.yml
  tasks:
    - name: Get the ordering service information
      ibm.blockchain_platform.ordering_service_info:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        name: "{{ ordering_service_name }}"
      register: ordering_service

    - name: Fail if the ordering service does not exist
      fail:
        msg: "{{ ordering_service_name }} does not exist"
      when: not ordering_service.exists

    - name: Fetch the system channel configuration
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ ordering_org_name }} Admin.json"
        msp_id: "{{ ordering_service_msp }}"
        operation: fetch
        name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
        path: original_config.bin

    - name: Create a copy of the system channel configuration
      copy:
        src: original_config.bin
        dest: updated_config.bin

    - name: Enable Fabric v2.x capabilities
      ibm.blockchain_platform.channel_capabilities:
        path: updated_config.bin
        channel: V2_0
        orderer: V2_0

    - name: Add the organization to the consortium
      ibm.blockchain_platform.consortium_member:
        state: present
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        organization: "{{ org1_name }}"
        path: updated_config.bin

    - name: Compute the system channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: compute_update
        name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
        original: original_config.bin
        updated: updated_config.bin
        path: config_update.bin
      register: compute_update

    - name: Sign the system channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ home_dir }}/{{ ordering_org_name }} Admin.json"
        msp_id: "{{ ordering_service_msp }}"
        name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
        path: config_update.bin
      when: compute_update.path

    - name: Apply the system channel configuration update
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ ordering_org_name }} Admin.json"
        msp_id: "{{ ordering_service_msp }}"
        name: "{{ ordering_service.ordering_service[0].system_channel_id }}"
        path: config_update.bin
      when: compute_update.path


## Create Channel 

- name: Create the channel
  hosts: localhost
  vars_files:
    - common-vars.yml
    - org1-vars.yml
  tasks:
    - name: Check to see if the channel already exists
      ibm.blockchain_platform.channel_block:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: fetch
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        target: "0"
        path: channel_genesis_block.bin
      failed_when: False
      register: result

    - name: Fail on any error other than the channel not existing
      fail:
        msg: "{{ result.msg }}"
      when: result.msg is defined and 'NOT_FOUND' not in result.msg

    - name: Create the configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: create
        name: "{{ channel_name }}"
        path: config_update.bin
        organizations:
          - "{{ org1_name }}"
        policies:
          Admins: "{{ lookup('template', '08-admins-policy.json.j2') }}"
          Readers: "{{ lookup('template', '08-readers-policy.json.j2') }}"
          Writers: "{{ lookup('template', '08-writers-policy.json.j2') }}"
          Endorsement: "{{ lookup('template', '09-endorsement-policy.json.j2') }}"
          LifecycleEndorsement: "{{ lookup('template', '09-lifecycle-endorsement-policy.json.j2') }}"
        capabilities:
          application: V2_0
      when: result.msg is defined and 'NOT_FOUND' in result.msg

    - name: Sign the channel configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        path: config_update.bin
      when: result.msg is defined and 'NOT_FOUND' in result.msg

    - name: Apply the channel configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        path: config_update.bin
      when: result.msg is defined and 'NOT_FOUND' in result.msg

- name: Join the channel
  hosts: localhost
  vars_files:
    - common-vars.yml
    - org1-vars.yml
  tasks:
    - name: Fetch the genesis block for the channel
      ibm.blockchain_platform.channel_block:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: fetch
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        target: "0"
        path: channel_genesis_block.bin

    - name: Join the peer to the channel
      ibm.blockchain_platform.peer_channel:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: join
        peer: "{{ org1_peer_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        path: channel_genesis_block.bin

- name: Add the anchor peer to the channel
  hosts: localhost
  vars_files:
    - common-vars.yml
    - org1-vars.yml
  tasks:
    - name: Get the ordering service information
      ibm.blockchain_platform.ordering_service_info:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        name: "{{ ordering_service_name }}"
      register: ordering_service

    - name: Fail if the ordering service does not exist
      fail:
        msg: "{{ ordering_service_name }} does not exist"
      when: not ordering_service.exists

    - name: Fetch the channel configuration
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        operation: fetch
        name: "{{ channel_name }}"
        path: original_config.bin

    - name: Create a copy of the channel configuration
      copy:
        src: original_config.bin
        dest: updated_config.bin

    - name: Update the organization
      ibm.blockchain_platform.channel_member:
        state: present
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        organization: "{{ org1_name }}"
        anchor_peers:
          - "{{ org1_peer_name }}"
        path: updated_config.bin

    - name: Compute the channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: compute_update
        name: "{{ channel_name }}"
        original: original_config.bin
        updated: updated_config.bin
        path: config_update.bin
      register: compute_update

    - name: Sign the channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        path: config_update.bin
      when: compute_update.path

    - name: Apply the channel configuration update
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        path: config_update.bin
      when: compute_update.path

- name: Add the organization to the channel
  hosts: localhost
  vars_files:
    - common-vars.yml
    - org1-vars.yml
  tasks:
    - name: Get the ordering service information
      ibm.blockchain_platform.ordering_service_info:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        name: "{{ ordering_service_name }}"
      register: ordering_service

    - name: Fail if the ordering service does not exist
      fail:
        msg: "{{ ordering_service_name }} does not exist"
      when: not ordering_service.exists

    - name: Fetch the channel configuration
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        operation: fetch
        name: "{{ channel_name }}"
        path: original_config.bin

    - name: Create a copy of the channel configuration
      copy:
        src: original_config.bin
        dest: updated_config.bin

    - name: Add the organization to the channel
      ibm.blockchain_platform.channel_member:
        state: present
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        organization: "{{ org1_name }}"
        path: updated_config.bin

    - name: Update the channel admins policy
      ibm.blockchain_platform.channel_policy:
        state: present
        path: updated_config.bin
        name: Admins
        policy: "{{ lookup('template', '14-admins-policy.json.j2') }}"

    - name: Update the channel readers policy
      ibm.blockchain_platform.channel_policy:
        state: present
        path: updated_config.bin
        name: Readers
        policy: "{{ lookup('template', '14-readers-policy.json.j2') }}"

    - name: Update the channel writers policy
      ibm.blockchain_platform.channel_policy:
        state: present
        path: updated_config.bin
        name: Writers
        policy: "{{ lookup('template', '14-writers-policy.json.j2') }}"

    - name: Compute the channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: compute_update
        name: "{{ channel_name }}"
        original: original_config.bin
        updated: updated_config.bin
        path: config_update.bin
      register: compute_update

    - name: Sign the channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        path: config_update.bin
      when: compute_update.path

    - name: Apply the channel configuration update
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ home_dir }}/{{ org1_name }} Admin.json"
        msp_id: "{{ org1_msp_id }}"
        name: "{{ channel_name }}"
        path: config_update.bin
      when: compute_update.path
